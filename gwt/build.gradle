
apply plugin: "java"
apply plugin: "gwt"
apply plugin: "war"

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

def HttpFileServer server = null
def httpFilePort = 9090

gwt {
  gwtVersion = gwtFrameworkVersion // Should match the version used for building the GWT backend. See gradle.properties.
  maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
  minHeapSize = '1G'

  src = files(file('src/main/java')) // Needs to be in front of "modules" below.
  modules 'net.benmclean.warpreader.GdxDefinition'
  devModules 'net.benmclean.warpreader.GdxDefinitionSuperdev'
  project.webAppDirName = 'webapp'

  compiler.strict = true
  compiler.disableCastChecking = true
}

dependencies {
  compile project(':core')
  compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
  compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
  compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
  compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion:sources"
  compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion"
  compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"
  compile "com.sudoplay.joise:joise:$joiseVersion:sources"
  compile "com.github.czyzby:noise4j:$noise4jVersion:sources"
  compile "com.squidpony:squidlib-extra:$squidLibExtraVersion:sources"
  compile "com.squidpony:squidlib-util:$squidLibUtilVersion:sources"
  compile "com.github.tommyettinger:regexodus:$regExodusVersion:sources"
  compile "net.dermetfan.libgdx-utils:libgdx-utils:$utilsVersion:sources"
  compile "com.github.squidpony.squidlib:squidlib:$squidLibVersion:sources"

}

task startHttpServer() {
    dependsOn draftCompileGwt

    String output = project.buildDir.path + "/gwt/draftOut";

    doLast {
        copy {
            from "webapp"
            into output
        }

        copy {
            from "war"
            into output
        }

        server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)

        println "Server started in directory " + server.getContentRoot() + ", port " + server.getPort()
    }
}

task superDev(type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
            }
        copy {
            from "war"
            into "build/dist"
        }
    }
}
task addSource {
  doLast {
    sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)

  }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

eclipse.project.name = appName + "-gwt"
